package com.linecorp.kotlinjdsl.module.sql.render.insert

import com.linecorp.kotlinjdsl.dsl.sql.Normal
import com.linecorp.kotlinjdsl.dsl.sql.sql
import com.linecorp.kotlinjdsl.module.sql.render.AbstractSqlRenderTest
import com.linecorp.kotlinjdsl.querymodel.sql.InsertQuery
import com.linecorp.kotlinjdsl.render.sql.SqlRendered
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test

class InsertDslRenderTest : AbstractSqlRenderTest() {
    private val byte1 = 1.toByte()
    private val byte2 = 2.toByte()
    private val byte3 = 3.toByte()
    private val byte4 = 4.toByte()

    private val short1 = 1.toShort()
    private val short2 = 2.toShort()
    private val short3 = 3.toShort()
    private val short4 = 4.toShort()

    private val int1 = 1
    private val int2 = 2
    private val int3 = 3
    private val int4 = 4

    private val long1 = 1L
    private val long2 = 2L
    private val long3 = 3L
    private val long4 = 4L

    private val float1 = 1.0f
    private val float2 = 2.0f
    private val float3 = 3.0f
    private val float4 = 4.0f

    private val double1 = 1.0
    private val double2 = 2.0
    private val double3 = 3.0
    private val double4 = 4.0

    private val char1 = 1.toChar()
    private val char2 = 2.toChar()
    private val char3 = 3.toChar()
    private val char4 = 4.toChar()

    private val boolean1 = true
    private val boolean2 = false
    private val boolean3 = true
    private val boolean4 = false

    private val string1 = "1"
    private val string2 = "2"
    private val string3 = "3"
    private val string4 = "4"

    private val custom11 = Custom1("1")
    private val custom12 = Custom1("2")
    private val custom13 = Custom1("3")
    private val custom14 = Custom1("4")

    private val custom21 = object : Custom2 {}
    private val custom22 = object : Custom2 {}
    private val custom23 = object : Custom2 {}
    private val custom24 = object : Custom2 {}

    private val bytes1 = arrayOf(1.toByte())
    private val bytes2 = arrayOf(2.toByte())
    private val bytes3 = arrayOf(3.toByte())
    private val bytes4 = arrayOf(4.toByte())

    private val shorts1 = arrayOf(1.toShort())
    private val shorts2 = arrayOf(2.toShort())
    private val shorts3 = arrayOf(3.toShort())
    private val shorts4 = arrayOf(4.toShort())

    private val ints1 = arrayOf(1)
    private val ints2 = arrayOf(2)
    private val ints3 = arrayOf(3)
    private val ints4 = arrayOf(4)

    private val longs1 = arrayOf(1L)
    private val longs2 = arrayOf(2L)
    private val longs3 = arrayOf(3L)
    private val longs4 = arrayOf(4L)

    private val floats1 = arrayOf(1.0f)
    private val floats2 = arrayOf(2.0f)
    private val floats3 = arrayOf(3.0f)
    private val floats4 = arrayOf(4.0f)

    private val doubles1 = arrayOf(1.0)
    private val doubles2 = arrayOf(2.0)
    private val doubles3 = arrayOf(3.0)
    private val doubles4 = arrayOf(4.0)

    private val chars1 = arrayOf(1.toChar())
    private val chars2 = arrayOf(2.toChar())
    private val chars3 = arrayOf(3.toChar())
    private val chars4 = arrayOf(4.toChar())

    private val booleans1 = arrayOf(true)
    private val booleans2 = arrayOf(false)
    private val booleans3 = arrayOf(true)
    private val booleans4 = arrayOf(false)

    private val strings1 = arrayOf("1")
    private val strings2 = arrayOf("2")
    private val strings3 = arrayOf("3")
    private val strings4 = arrayOf("4")

    private val custom1s1 = arrayOf(Custom1("1"))
    private val custom1s2 = arrayOf(Custom1("2"))
    private val custom1s3 = arrayOf(Custom1("3"))
    private val custom1s4 = arrayOf(Custom1("4"))

    private val custom2s1: Array<Custom2> = arrayOf(object : Custom2 {})
    private val custom2s2: Array<Custom2> = arrayOf(object : Custom2 {})
    private val custom2s3: Array<Custom2> = arrayOf(object : Custom2 {})
    private val custom2s4: Array<Custom2> = arrayOf(object : Custom2 {})

    @Test
    @DisplayName("INSERT INTO NonNullTable (column1)")
    fun insert1() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
            ).values(
                byte1,
            ).values(
                param(byte2),
            ).values(
                listOf(
                    param(byte3),
                ),
            ).values(
                byte4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1) VALUES (?), (?), (?), (?)",
            params = indexedParams {
                param(byte1)
                param(byte2)
                param(byte3)
                param(byte4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    @DisplayName("INSERT INTO NonNullTable (column1..column2)")
    fun insert2() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
            ).values(
                byte1,
                short1,
            ).values(
                param(byte2),
                param(short2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                ),
            ).values(
                byte4,
                short4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2) VALUES (?, ?), (?, ?), (?, ?), (?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(byte2)
                param(short2)
                param(byte3)
                param(short3)
                param(byte4)
                param(short4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    @DisplayName("INSERT INTO NonNullTable (column1..column3)")
    fun insert3() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
            ).values(
                byte1,
                short1,
                int1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                ),
            ).values(
                byte4,
                short4,
                int4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3) VALUES (?, ?, ?), (?, ?, ?), (?, ?, ?), (?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(byte2)
                param(short2)
                param(int2)
                param(byte3)
                param(short3)
                param(int3)
                param(byte4)
                param(short4)
                param(int4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    @DisplayName("INSERT INTO NonNullTable (column1..column4)")
    fun insert4() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
            ).values(
                byte1,
                short1,
                int1,
                long1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4) VALUES (?, ?, ?, ?), (?, ?, ?, ?), (?, ?, ?, ?), (?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    @DisplayName("INSERT INTO NonNullTable (column1..column5)")
    fun insert5() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5) VALUES (?, ?, ?, ?, ?), (?, ?, ?, ?, ?), (?, ?, ?, ?, ?), (?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    @DisplayName("INSERT INTO NonNullTable (column1..column6)")
    fun insert6() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6) VALUES (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    @DisplayName("INSERT INTO NonNullTable (column1..column7)")
    fun insert7() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7) VALUES (?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    @DisplayName("INSERT INTO NonNullTable (column1..column8)")
    fun insert8() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8) VALUES (?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    @DisplayName("INSERT INTO NonNullTable (column1..column9)")
    fun insert9() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    @DisplayName("INSERT INTO NonNullTable (column1..column10)")
    fun insert10() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    @DisplayName("INSERT INTO NonNullTable (column1..column11)")
    fun insert11() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with 12 columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
                column(NonNullTable::column12),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with 13 columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
                column(NonNullTable::column12),
                column(NonNullTable::column13),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with 14 columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
                column(NonNullTable::column12),
                column(NonNullTable::column13),
                column(NonNullTable::column14),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with 15 columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
                column(NonNullTable::column12),
                column(NonNullTable::column13),
                column(NonNullTable::column14),
                column(NonNullTable::column15),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with 16 columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
                column(NonNullTable::column12),
                column(NonNullTable::column13),
                column(NonNullTable::column14),
                column(NonNullTable::column15),
                column(NonNullTable::column16),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with 17 columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
                column(NonNullTable::column12),
                column(NonNullTable::column13),
                column(NonNullTable::column14),
                column(NonNullTable::column15),
                column(NonNullTable::column16),
                column(NonNullTable::column17),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with 18 columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
                column(NonNullTable::column12),
                column(NonNullTable::column13),
                column(NonNullTable::column14),
                column(NonNullTable::column15),
                column(NonNullTable::column16),
                column(NonNullTable::column17),
                column(NonNullTable::column18),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                    param(chars3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
                chars4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17, column18) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(chars3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
                param(chars4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with 19 columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
                column(NonNullTable::column12),
                column(NonNullTable::column13),
                column(NonNullTable::column14),
                column(NonNullTable::column15),
                column(NonNullTable::column16),
                column(NonNullTable::column17),
                column(NonNullTable::column18),
                column(NonNullTable::column19),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
                booleans1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
                param(booleans2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                    param(chars3),
                    param(booleans3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
                chars4,
                booleans4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17, column18, column19) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(booleans1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(booleans2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(chars3)
                param(booleans3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
                param(chars4)
                param(booleans4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with 20 columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
                column(NonNullTable::column12),
                column(NonNullTable::column13),
                column(NonNullTable::column14),
                column(NonNullTable::column15),
                column(NonNullTable::column16),
                column(NonNullTable::column17),
                column(NonNullTable::column18),
                column(NonNullTable::column19),
                column(NonNullTable::column20),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
                booleans1,
                strings1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
                param(booleans2),
                param(strings2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                    param(chars3),
                    param(booleans3),
                    param(strings3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
                chars4,
                booleans4,
                strings4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17, column18, column19, column20) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(booleans1)
                param(strings1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(booleans2)
                param(strings2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(chars3)
                param(booleans3)
                param(strings3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
                param(chars4)
                param(booleans4)
                param(strings4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with 21 columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
                column(NonNullTable::column12),
                column(NonNullTable::column13),
                column(NonNullTable::column14),
                column(NonNullTable::column15),
                column(NonNullTable::column16),
                column(NonNullTable::column17),
                column(NonNullTable::column18),
                column(NonNullTable::column19),
                column(NonNullTable::column20),
                column(NonNullTable::column21),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
                booleans1,
                strings1,
                custom1s1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
                param(booleans2),
                param(strings2),
                param(custom1s2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                    param(chars3),
                    param(booleans3),
                    param(strings3),
                    param(custom1s3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
                chars4,
                booleans4,
                strings4,
                custom1s4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17, column18, column19, column20, column21) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(booleans1)
                param(strings1)
                param(custom1s1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(booleans2)
                param(strings2)
                param(custom1s2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(chars3)
                param(booleans3)
                param(strings3)
                param(custom1s3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
                param(chars4)
                param(booleans4)
                param(strings4)
                param(custom1s4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with 22 columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).columns(
                column(NonNullTable::column1),
                column(NonNullTable::column2),
                column(NonNullTable::column3),
                column(NonNullTable::column4),
                column(NonNullTable::column5),
                column(NonNullTable::column6),
                column(NonNullTable::column7),
                column(NonNullTable::column8),
                column(NonNullTable::column9),
                column(NonNullTable::column10),
                column(NonNullTable::column11),
                column(NonNullTable::column12),
                column(NonNullTable::column13),
                column(NonNullTable::column14),
                column(NonNullTable::column15),
                column(NonNullTable::column16),
                column(NonNullTable::column17),
                column(NonNullTable::column18),
                column(NonNullTable::column19),
                column(NonNullTable::column20),
                column(NonNullTable::column21),
                column(NonNullTable::column22),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
                booleans1,
                strings1,
                custom1s1,
                custom2s1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
                param(booleans2),
                param(strings2),
                param(custom1s2),
                param(custom2s2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                    param(chars3),
                    param(booleans3),
                    param(strings3),
                    param(custom1s3),
                    param(custom2s3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
                chars4,
                booleans4,
                strings4,
                custom1s4,
                custom2s4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17, column18, column19, column20, column21, column22) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(booleans1)
                param(strings1)
                param(custom1s1)
                param(custom2s1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(booleans2)
                param(strings2)
                param(custom1s2)
                param(custom2s2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(chars3)
                param(booleans3)
                param(strings3)
                param(custom1s3)
                param(custom2s3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
                param(chars4)
                param(booleans4)
                param(strings4)
                param(custom1s4)
                param(custom2s4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO non_null_table with n columns`() {
        // given
        val insert: InsertQuery<NonNullTable> = sql(Normal) {
            insertInto(
                table(NonNullTable::class),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
                booleans1,
                strings1,
                custom1s1,
                custom2s1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
                param(booleans2),
                param(strings2),
                param(custom1s2),
                param(custom2s2),
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NonNullTable VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(booleans1)
                param(strings1)
                param(custom1s1)
                param(custom2s1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(booleans2)
                param(strings2)
                param(custom1s2)
                param(custom2s2)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 1 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
            ).values(
                null,
            ).values(
                param(null),
            ).values(
                listOf(
                    param(null),
                ),
            ).values(
                null,
            ).values(
                byte1,
            ).values(
                param(byte2),
            ).values(
                listOf(
                    param(byte3),
                ),
            ).values(
                byte4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1) VALUES (?), (?), (?), (?), (?), (?), (?), (?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(byte2)
                param(byte3)
                param(byte4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 2 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
            ).values(
                null,
                null,
            ).values(
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
            ).values(
                byte1,
                short1,
            ).values(
                param(byte2),
                param(short2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                ),
            ).values(
                byte4,
                short4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2) VALUES (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(byte2)
                param(short2)
                param(byte3)
                param(short3)
                param(byte4)
                param(short4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 3 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
            ).values(
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                ),
            ).values(
                byte4,
                short4,
                int4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3) VALUES (?, ?, ?), (?, ?, ?), (?, ?, ?), (?, ?, ?), (?, ?, ?), (?, ?, ?), (?, ?, ?), (?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(byte2)
                param(short2)
                param(int2)
                param(byte3)
                param(short3)
                param(int3)
                param(byte4)
                param(short4)
                param(int4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 4 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
            ).values(
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4) VALUES (?, ?, ?, ?), (?, ?, ?, ?), (?, ?, ?, ?), (?, ?, ?, ?), (?, ?, ?, ?), (?, ?, ?, ?), (?, ?, ?, ?), (?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 5 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
            ).values(
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5) VALUES (?, ?, ?, ?, ?), (?, ?, ?, ?, ?), (?, ?, ?, ?, ?), (?, ?, ?, ?, ?), (?, ?, ?, ?, ?), (?, ?, ?, ?, ?), (?, ?, ?, ?, ?), (?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 6 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6) VALUES (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 7 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7) VALUES (?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 8 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8) VALUES (?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 9 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 10 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 11 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 12 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
                column(NullableTable::column12),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 13 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
                column(NullableTable::column12),
                column(NullableTable::column13),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 14 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
                column(NullableTable::column12),
                column(NullableTable::column13),
                column(NullableTable::column14),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 15 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
                column(NullableTable::column12),
                column(NullableTable::column13),
                column(NullableTable::column14),
                column(NullableTable::column15),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 16 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
                column(NullableTable::column12),
                column(NullableTable::column13),
                column(NullableTable::column14),
                column(NullableTable::column15),
                column(NullableTable::column16),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 17 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
                column(NullableTable::column12),
                column(NullableTable::column13),
                column(NullableTable::column14),
                column(NullableTable::column15),
                column(NullableTable::column16),
                column(NullableTable::column17),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 18 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
                column(NullableTable::column12),
                column(NullableTable::column13),
                column(NullableTable::column14),
                column(NullableTable::column15),
                column(NullableTable::column16),
                column(NullableTable::column17),
                column(NullableTable::column18),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                    param(chars3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
                chars4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17, column18) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(chars3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
                param(chars4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 19 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
                column(NullableTable::column12),
                column(NullableTable::column13),
                column(NullableTable::column14),
                column(NullableTable::column15),
                column(NullableTable::column16),
                column(NullableTable::column17),
                column(NullableTable::column18),
                column(NullableTable::column19),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
                booleans1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
                param(booleans2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                    param(chars3),
                    param(booleans3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
                chars4,
                booleans4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17, column18, column19) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(booleans1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(booleans2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(chars3)
                param(booleans3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
                param(chars4)
                param(booleans4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 20 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
                column(NullableTable::column12),
                column(NullableTable::column13),
                column(NullableTable::column14),
                column(NullableTable::column15),
                column(NullableTable::column16),
                column(NullableTable::column17),
                column(NullableTable::column18),
                column(NullableTable::column19),
                column(NullableTable::column20),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
                booleans1,
                strings1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
                param(booleans2),
                param(strings2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                    param(chars3),
                    param(booleans3),
                    param(strings3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
                chars4,
                booleans4,
                strings4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17, column18, column19, column
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(booleans1)
                param(strings1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(booleans2)
                param(strings2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(chars3)
                param(booleans3)
                param(strings3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
                param(chars4)
                param(booleans4)
                param(strings4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 21 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
                column(NullableTable::column12),
                column(NullableTable::column13),
                column(NullableTable::column14),
                column(NullableTable::column15),
                column(NullableTable::column16),
                column(NullableTable::column17),
                column(NullableTable::column18),
                column(NullableTable::column19),
                column(NullableTable::column20),
                column(NullableTable::column21),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
                booleans1,
                strings1,
                custom1s1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
                param(booleans2),
                param(strings2),
                param(custom1s2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                    param(chars3),
                    param(booleans3),
                    param(strings3),
                    param(custom1s3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
                chars4,
                booleans4,
                strings4,
                custom1s4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17, column18, column19, column20, column
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(booleans1)
                param(strings1)
                param(custom1s1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(booleans2)
                param(strings2)
                param(custom1s2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(chars3)
                param(booleans3)
                param(strings3)
                param(custom1s3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
                param(chars4)
                param(booleans4)
                param(strings4)
                param(custom1s4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with 22 columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).columns(
                column(NullableTable::column1),
                column(NullableTable::column2),
                column(NullableTable::column3),
                column(NullableTable::column4),
                column(NullableTable::column5),
                column(NullableTable::column6),
                column(NullableTable::column7),
                column(NullableTable::column8),
                column(NullableTable::column9),
                column(NullableTable::column10),
                column(NullableTable::column11),
                column(NullableTable::column12),
                column(NullableTable::column13),
                column(NullableTable::column14),
                column(NullableTable::column15),
                column(NullableTable::column16),
                column(NullableTable::column17),
                column(NullableTable::column18),
                column(NullableTable::column19),
                column(NullableTable::column20),
                column(NullableTable::column21),
                column(NullableTable::column22),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                listOf(
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                    param(null),
                ),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
                booleans1,
                strings1,
                custom1s1,
                custom2s1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
                param(booleans2),
                param(strings2),
                param(custom1s2),
                param(custom2s2),
            ).values(
                listOf(
                    param(byte3),
                    param(short3),
                    param(int3),
                    param(long3),
                    param(float3),
                    param(double3),
                    param(char3),
                    param(boolean3),
                    param(string3),
                    param(custom13),
                    param(custom23),
                    param(bytes3),
                    param(shorts3),
                    param(ints3),
                    param(longs3),
                    param(floats3),
                    param(doubles3),
                    param(chars3),
                    param(booleans3),
                    param(strings3),
                    param(custom1s3),
                    param(custom2s3),
                ),
            ).values(
                byte4,
                short4,
                int4,
                long4,
                float4,
                double4,
                char4,
                boolean4,
                string4,
                custom14,
                custom24,
                bytes4,
                shorts4,
                ints4,
                longs4,
                floats4,
                doubles4,
                chars4,
                booleans4,
                strings4,
                custom1s4,
                custom2s4,
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable(column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17, column18, column19, column20, column21, column
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(booleans1)
                param(strings1)
                param(custom1s1)
                param(custom2s1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(booleans2)
                param(strings2)
                param(custom1s2)
                param(custom2s2)
                param(byte3)
                param(short3)
                param(int3)
                param(long3)
                param(float3)
                param(double3)
                param(char3)
                param(boolean3)
                param(string3)
                param(custom13)
                param(custom23)
                param(bytes3)
                param(shorts3)
                param(ints3)
                param(longs3)
                param(floats3)
                param(doubles3)
                param(chars3)
                param(booleans3)
                param(strings3)
                param(custom1s3)
                param(custom2s3)
                param(byte4)
                param(short4)
                param(int4)
                param(long4)
                param(float4)
                param(double4)
                param(char4)
                param(boolean4)
                param(string4)
                param(custom14)
                param(custom24)
                param(bytes4)
                param(shorts4)
                param(ints4)
                param(longs4)
                param(floats4)
                param(doubles4)
                param(chars4)
                param(booleans4)
                param(strings4)
                param(custom1s4)
                param(custom2s4)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    @Test
    fun `INSERT INTO nullable_table with n columns`() {
        // given
        val insert: InsertQuery<NullableTable> = sql(Normal) {
            insertInto(
                table(NullableTable::class),
            ).values(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ).values(
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
                param(null),
            ).values(
                byte1,
                short1,
                int1,
                long1,
                float1,
                double1,
                char1,
                boolean1,
                string1,
                custom11,
                custom21,
                bytes1,
                shorts1,
                ints1,
                longs1,
                floats1,
                doubles1,
                chars1,
                booleans1,
                strings1,
                custom1s1,
                custom2s1,
            ).values(
                param(byte2),
                param(short2),
                param(int2),
                param(long2),
                param(float2),
                param(double2),
                param(char2),
                param(boolean2),
                param(string2),
                param(custom12),
                param(custom22),
                param(bytes2),
                param(shorts2),
                param(ints2),
                param(longs2),
                param(floats2),
                param(doubles2),
                param(chars2),
                param(booleans2),
                param(strings2),
                param(custom1s2),
                param(custom2s2),
            )
        }

        // when
        val actual = render(insert)

        // then
        val expected = SqlRendered(
            query = "INSERT INTO NullableTable VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            params = indexedParams {
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(null)
                param(byte1)
                param(short1)
                param(int1)
                param(long1)
                param(float1)
                param(double1)
                param(char1)
                param(boolean1)
                param(string1)
                param(custom11)
                param(custom21)
                param(bytes1)
                param(shorts1)
                param(ints1)
                param(longs1)
                param(floats1)
                param(doubles1)
                param(chars1)
                param(booleans1)
                param(strings1)
                param(custom1s1)
                param(custom2s1)
                param(byte2)
                param(short2)
                param(int2)
                param(long2)
                param(float2)
                param(double2)
                param(char2)
                param(boolean2)
                param(string2)
                param(custom12)
                param(custom22)
                param(bytes2)
                param(shorts2)
                param(ints2)
                param(longs2)
                param(floats2)
                param(doubles2)
                param(chars2)
                param(booleans2)
                param(strings2)
                param(custom1s2)
                param(custom2s2)
            },
        )

        assertThat(actual).isEqualTo(expected)
    }

    interface NonNullTable {
        val column1: Byte
        val column2: Short
        val column3: Int
        val column4: Long
        val column5: Float
        val column6: Double
        val column7: Char
        val column8: Boolean
        val column9: String
        val column10: Custom1
        val column11: Custom2
        val column12: Array<Byte>
        val column13: Array<Short>
        val column14: Array<Int>
        val column15: Array<Long>
        val column16: Array<Float>
        val column17: Array<Double>
        val column18: Array<Char>
        val column19: Array<Boolean>
        val column20: Array<String>
        val column21: Array<Custom1>
        val column22: Array<Custom2>
    }

    interface NullableTable {
        val column1: Byte?
        val column2: Short?
        val column3: Int?
        val column4: Long?
        val column5: Float?
        val column6: Double?
        val column7: Char?
        val column8: Boolean?
        val column9: String?
        val column10: Custom1?
        val column11: Custom2?
        val column12: Array<Byte>?
        val column13: Array<Short>?
        val column14: Array<Int>?
        val column15: Array<Long>?
        val column16: Array<Float>?
        val column17: Array<Double>?
        val column18: Array<Char>?
        val column19: Array<Boolean>?
        val column20: Array<String>?
        val column21: Array<Custom1>?
        val column22: Array<Custom2>?
    }

    class Custom1(val value: String)
    interface Custom2
}
